generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                       String                    @id @default(cuid())
  username                 String?                   @unique
  mobile                   String?                   @unique
  password                 String?
  firstName                String?
  lastName                 String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  name                     String?
  email                    String?                   @unique
  emailVerified            DateTime?                 @map("email_verified")
  image                    String?
  isAdmin                  Boolean                   @default(false)
  blogs                    Blog[]                    @relation("UserBlogs")
  accounts                 Account[]
  installer                Installer?
  sessions                 Session[]
  subscriptionApplications SubscriptionApplication[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Blog {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  authorId  String
  excerpt   String?  @db.VarChar(500)
  featured  Boolean  @default(false)
  imagePath String?
  published Boolean  @default(false)
  readTime  Int?     @default(5)
  tags      String?
  author    User     @relation("UserBlogs", fields: [authorId], references: [id])
}

model Installer {
  id            Int            @id @default(autoincrement())
  userId        String         @unique
  brandPhotoPath String?
  isActive      Boolean        @default(true)
  customers     Customer[]
  installations Installation[]
  user          User           @relation(fields: [userId], references: [id])
  subscription  Subscription?

  @@map("installers")
}

model Subscription {
  id              Int       @id @default(autoincrement())
  installerId     Int       @unique
  startDate       DateTime
  endDate         DateTime
  expiryDate      DateTime  @default(dbgenerated("(now() + '1 year'::interval)"))
  plan            String    @default("yearly")
  type            String    @default("standard")
  isActive        Boolean   @default(true)
  createdDate     DateTime  @default(now())
  updatedDate     DateTime  @updatedAt
  createdByUserId String?
  updatedByUserId String?
  installer       Installer @relation(fields: [installerId], references: [id])

  @@map("subscriptions")
}

model Customer {
  id            Int            @id @default(autoincrement())
  installerId   Int
  firstName     String
  lastName      String
  mobile        String?
  email         String?
  createdDate   DateTime       @default(now())
  updatedDate   DateTime       @updatedAt
  addresses     Address[]
  installer     Installer      @relation(fields: [installerId], references: [id])
  installations Installation[]

  @@map("customers")
}

model Address {
  id                 Int            @id @default(autoincrement())
  referenceId        Int
  referenceType      String         @default("customer")
  postcode           String
  street             String?
  city               String?
  telephone          String?
  latitude           Float?
  longitude          Float?
  propertyCreateDate DateTime?
  buildingUse        String?
  propertyType       String?
  createdDate        DateTime       @default(now())
  updatedDate        DateTime       @updatedAt
  customer           Customer       @relation(fields: [referenceId], references: [id])
  installations      Installation[]

  @@map("addresses")
}

enum InstallationStatus {
  DETAILS_COMPLETED
  SIGNATURE_NEEDED
  CONTRACT_SIGNED
}

model Installation {
  id             Int               @id @default(autoincrement())
  installerId    Int
  customerId     Int
  addressId      Int
  postcode       String
  zone           String?
  totalPVOutput  Float
  annualACOutput Float
  roofDetails    Json?
  shadeFactors   Json?
  orientations   Json?
  roofSlopes     Json?
  roofTypes      Json?
  results        Json?
  pdfPath        String?
  status         InstallationStatus @default(DETAILS_COMPLETED)
  signatureInfo  Json?
  isLocked       Boolean           @default(false)
  createdDate    DateTime          @default(now())
  updatedDate    DateTime          @updatedAt
  address        Address           @relation(fields: [addressId], references: [id])
  customer       Customer          @relation(fields: [customerId], references: [id])
  installer      Installer         @relation(fields: [installerId], references: [id])

  @@map("installations")
}

model SubscriptionApplication {
  id               Int      @id @default(autoincrement())
  userId           String
  subscriptionType String
  receiptCode      String
  receiptPhotoPath String
  brandPhotoPath   String?
  notes            String?
  status           String   @default("pending")
  createdDate      DateTime @default(now())
  updatedDate      DateTime @updatedAt
  reviewedByUserId String?
  reviewNotes      String?
  user             User     @relation(fields: [userId], references: [id])

  @@map("subscription_applications")
}
