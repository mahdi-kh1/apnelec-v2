import fs from 'fs';
import path from 'path';
import { prisma } from './prisma';

interface Customer {
  firstName: string;
  lastName: string;
}

interface Address {
  street?: string;
  city?: string;
  postcode: string;
  telephone?: string;
}

interface SignatureInfo {
  customerName: string;
  macAddress: string;
  ipAddress: string;
  signedAt: Date;
}

export async function generateInstallationPDF(
  installationId: number,
  signatureInfo?: SignatureInfo
): Promise<string> {
  // Fetch installation with related data
  const installation = await prisma.installation.findUnique({
    where: { id: installationId },
    include: {
      customer: true,
      address: true
    }
  });
  
  if (!installation) {
    throw new Error('Installation not found');
  }
  
  // Dynamic import pdfkit (it's only available on server)
  const PDFDocument = (await import('pdfkit')).default;
  const doc = new PDFDocument();
  
  // Generate unique filename
  const filename = `installation-${installation.id}-${Date.now()}.pdf`;
  const pdfPath = path.join(process.cwd(), 'public', 'generated-pdfs', filename);
  
  // Create write stream
  const writeStream = fs.createWriteStream(pdfPath);
  doc.pipe(writeStream);
  
  // Add header
  doc.fontSize(20).text('Solar Installation Performance Estimate', { align: 'center' });
  doc.moveDown();
  
  // Add customer information
  doc.fontSize(14).text('Customer Information');
  doc.fontSize(12)
    .text(`Name: ${installation.customer.firstName} ${installation.customer.lastName}`)
    .text(`Address: ${installation.address.street}, ${installation.address.city}, ${installation.address.postcode}`)
    .text(`Phone: ${installation.address.telephone}`);
  doc.moveDown();
  
  // Add installation details
  doc.fontSize(14).text('Installation Details');
  doc.fontSize(12)
    .text(`Total PV Output: ${installation.totalPVOutput} kWp`)
    .text(`Annual AC Output: ${installation.annualACOutput} kWh`)
    .text(`Zone: ${installation.zone}`);
  doc.moveDown();
  
  // Add roof details
  doc.fontSize(14).text('Roof Details');
  const roofDetails = JSON.parse(installation.roofDetails as string);
  roofDetails.forEach((roof: any, index: number) => {
    doc.fontSize(12)
      .text(`Roof ${index + 1}:`)
      .text(`  Type: ${roof.type}`)
      .text(`  Orientation: ${roof.orientation}°`)
      .text(`  Slope: ${roof.slope}°`)
      .text(`  Shade Factor: ${roof.shadeFactor}%`)
      .text(`  PV Output: ${roof.pvOutput} kWp`);
    doc.moveDown();
  });
  
  // Add signature section if provided
  if (signatureInfo) {
    doc.fontSize(14).text('Digital Signature Information');
    doc.fontSize(12)
      .text(`Signed by: ${signatureInfo.customerName}`)
      .text(`Date: ${signatureInfo.signedAt.toLocaleString()}`)
      .text(`MAC Address: ${signatureInfo.macAddress}`)
      .text(`IP Address: ${signatureInfo.ipAddress}`);
  }
  
  // Add footer
  doc.fontSize(10)
    .text('This document was generated by APNelec Solar Calculator', {
      align: 'center'
    });
  
  // Finalize PDF
  doc.end();
  
  // Return the public URL
  return `/generated-pdfs/${filename}`;
}

export async function generateSignatureLink(installationId: number): Promise<string> {
  // Generate a unique signature link
  const token = Buffer.from(`${installationId}-${Date.now()}`).toString('base64');
  return `/installations/sign/${token}`;
} 